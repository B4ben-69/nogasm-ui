{"version":3,"sources":["LEDRing/index.js","Header/index.js","Sidebar/index.js","App.js","serviceWorker.js","index.js"],"names":["rad","deg","Math","PI","map","num","in_min","in_max","out_min","out_max","LEDRing","props","pressure","arousal","limit","pressureIdx","floor","ledCount","arousalIdx","leds","i","j","rot","x","sin","radius","y","cos","l","h","color","glow","className","style","width","height","led","key","backgroundColor","left","top","transform","boxShadow","opacity","Header","rssi","status","ssid","ip","signalStrength","Sidebar","App","HOST","ws","lastDraw","state","connected","log","sampleDepth","sampleRate","settings","peakLimit","brightness","e","preventDefault","target","value","this","setState","send","cmd","data","sendMessage","JSON","stringify","push","doc","parse","console","warn","slice","millis","newSettings","peak_limit","newStatus","signal_strength","length","url","onOpen","handleWsOpen","bind","onClose","handleWsClose","ref","websocket","debug","onMessage","handleWsMessage","getLastData","htmlFor","type","min","max","onChange","handleBrightnessChange","id","handleLimitChange","href","onClick","reconnect","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wVASMA,G,cAAM,SAACC,GAAD,OAASA,GAAOC,KAAKC,GAAK,OAEhCC,EAAM,SAACC,EAAKC,EAAQC,EAAQC,EAASC,GACzC,OAAQJ,EAAMC,IAAWG,EAAUD,IAAYD,EAASD,GAAUE,GAqDrDE,EAlDC,SAACC,GASf,IAT0B,IAClBC,EAA6BD,EAA7BC,SAAUC,EAAmBF,EAAnBE,QAASC,EAAUH,EAAVG,MACrBC,EAAcb,KAAKc,MAAMZ,EAAIQ,EAAU,EAAG,KAAM,EAAGK,KAEnDC,GADWhB,KAAKc,MAAMZ,EAAIU,EAAO,EAAG,KAAM,EAAGG,KAChCf,KAAKc,MAAMZ,EAAIS,EAAS,EAAGC,EAAO,EAAGG,MAEpDE,EAAO,GAGFC,EAAI,EAAGA,EApBD,GAoBeA,IAAK,CACjC,IAAMC,EArBO,GAqBQD,EAAG,EAClBE,EArBO,GAEC,OAmBqBF,EAC7BG,EAxBK,IAwBArB,KAAKsB,IAAIxB,EAAIsB,IAAiB,EAAKG,IACxCC,EAzBK,IAyBAxB,KAAKyB,IAAI3B,EAAIsB,IAAiB,EAAKG,IAC1CG,EAAI,GACJC,EAAI,EAEJR,IAAMN,GACRc,EAAI,IACJD,EAAI,IAIKP,EAAIH,EACbW,EAAIzB,EAAIgB,EAAG,EAAGH,GAAc,EAAG,KAE/BW,EAAI,IAGNT,EAAKC,GAAK,CAAEU,MAAM,OAAD,OAASD,EAAT,mBAAqBD,EAArB,MAA4BL,IAAGG,IAAGJ,MAAKS,KAAMH,EAAI,KAGpE,OACE,yBAAKI,UAAW,WAAYC,MAAO,CAAEC,MA7C1B,IA6CyCC,OA7CzC,MA8CPhB,EAAKf,KAAI,SAACgC,EAAKhB,GAAN,OACT,yBAAKY,UAAW,WAAaZ,EAAGiB,IAAKjB,EAAGa,MAAO,CAC7CK,gBAAiBF,EAAIN,MACrBS,KAAMH,EAAIb,EACViB,IAAKJ,EAAIV,EACTe,UAAU,iCAAD,OAAmCL,EAAId,IAAvC,QACToB,UAAYN,EAAIL,KAAJ,uBAA2BK,EAAIN,OAAU,GACrDa,QAAUP,EAAIL,KAAO,EAAM,SAG/B,yBAAKC,UAAW,aAAe9B,KAAKc,MAAMH,EAAUC,EAAQ,KAA5D,KACA,yBAAKkB,UAAW,YAAhB,aC5BSY,EAZA,SAACjC,GAAW,IAlBLkC,EAmBZC,EAAWnC,EAAXmC,OAER,OACE,4BAAQd,UAAU,cAChB,0BAAMA,UAAW,QAAUc,EAAOC,MAAc,IAChD,0BAAMf,UAAW,MAAQc,EAAOE,IAAY,IAC5C,0BAAMhB,UAAW,YAAjB,KAzBgBa,EAyB6BC,EAAOG,iBAxB5C,GACH,WACEJ,GAAQ,GACV,MACEA,GAAQ,GACV,OACEA,GAAQ,GACV,YACEA,GAAQ,GACV,YACEA,EAAO,EACT,yBAEA,UAWL,OClBSK,EAPC,SAACvC,GACf,OACE,yBAAKqB,UAAW,aCkKLmB,E,kDAtJb,WAAYxC,GAAQ,IAAD,8BACjB,cAAMA,IANRyC,KAAO,gBAKY,EAJnBC,GAAK,KAIc,EAHnBC,SAAW,EAMT,EAAKC,MAAQ,CACXC,WAAW,EACXC,IAAK,GACL7C,SAAU,GACV8C,YAAa,IACbC,WAAY,EACZC,SAAU,CACRC,UAAW,IACXC,WAAY,KAEdhB,OAAQ,CACNC,KAAM,GACNC,GAAI,GACJC,eAAgB,IAhBH,E,mEAqBIc,GACrBA,EAAEC,iBACF,IAAMF,EAAaC,EAAEE,OAAOC,MAC5BC,KAAKC,SAAS,CAAER,SAAS,2BAAMO,KAAKZ,MAAMK,UAAlB,IAA4BE,iBACpDK,KAAKE,KAAK,CAAEC,IAAK,iBAAkBR,iB,wCAGnBC,GAChBA,EAAEC,iBACF,IAAMlD,EAAQiD,EAAEE,OAAOC,MACvBC,KAAKC,SAAS,CAAER,SAAS,2BAAMO,KAAKZ,MAAMK,UAAlB,IAA4BC,UAAW/C,MAC/DqD,KAAKE,KAAK,CAAEC,IAAK,YAAaxD,Y,2BAG3ByD,GACCJ,KAAKd,IACPc,KAAKd,GAAGmB,YAAYC,KAAKC,UAAUH,M,0BAInCA,GACF,IAAMd,EAAG,YAAOU,KAAKZ,MAAME,KAC3BA,EAAIkB,KAAKJ,GACTJ,KAAKC,SAAS,CAACX,U,gCAGPM,GACRA,EAAEC,iBACFG,KAAKE,KAAK,CAACC,IAAK,Y,qCAIhBH,KAAKC,SAAS,CAACZ,WAAW,IAC1BW,KAAKV,IAAI,aACTU,KAAKE,KAAK,CAACC,IAAK,iBAChBH,KAAKE,KAAK,CAACC,IAAK,oBAChBH,KAAKE,KAAK,CAACC,IAAK,oB,sCAIhBH,KAAKC,SAAS,CAACZ,WAAW,IAC1BW,KAAKV,IAAI,Y,sCAGKc,GACd,IAAIK,EAEJ,IACEA,EAAMH,KAAKI,MAAMN,GACjB,MAAMR,GACNa,EAAM,CAAEL,QACRO,QAAQC,KAAKhB,GAGf,GAA4B,qBAAjBa,EAAIhE,SAA0B,CACvC,IAAIA,EAAWuD,KAAKZ,MAAM3C,SAASoE,MAAM,GAAKb,KAAKZ,MAAMG,YAAc,IACvEkB,EAAIK,OAASL,EAAIK,OAAS,IAC1Bd,KAAKC,SAAS,CAAExD,SAAS,GAAD,mBAAMA,GAAN,CAAgBgE,WAExCE,QAAQrB,IAAImB,GAGd,GAAgB,aAAZA,EAAIN,IAAoB,CAC1B,IAAIY,EAAW,eAAOf,KAAKZ,MAAMK,UACN,qBAAnBgB,EAAId,aAAgCoB,EAAYpB,WAAac,EAAId,YAC9C,qBAAnBc,EAAIO,aAAgCD,EAAYrB,UAAYe,EAAIO,YACxEhB,KAAKC,SAAS,CAACR,SAAUsB,IAG3B,GAAgB,gBAAZN,EAAIN,IAAuB,CAC7B,IAAIc,EAAS,eAAOjB,KAAKZ,MAAMT,QAC/BsC,EAAUnC,eAAiB2B,EAAIS,gBAC/BD,EAAUpC,GAAK4B,EAAI5B,GACnBoC,EAAUrC,KAAO6B,EAAI7B,KACrBoB,KAAKC,SAAS,CAACtB,OAAQsC,O,oCAKzB,OAAQjB,KAAKZ,MAAM3C,SAAS0E,QAAUnB,KAAKZ,MAAM3C,SAASuD,KAAKZ,MAAM3C,SAAS0E,OAAS,IAAO,K,+BAGtF,IAAD,OACP,OACE,yBAAKtD,UAAU,OACb,kBAAC,IAAD,CACEuD,IAAK,QAAUpB,KAAKf,KACpBoC,OAAQrB,KAAKsB,aAAaC,KAAKvB,MAC/BwB,QAASxB,KAAKyB,cAAcF,KAAKvB,MACjC0B,IAAK,SAAAC,GAAS,OAAI,EAAKzC,GAAKyC,GAC5BC,OAAK,EACLC,UAAW7B,KAAK8B,gBAAgBP,KAAKvB,QAGvC,kBAAC,EAAD,CAAQrB,OAASqB,KAAKZ,MAAMT,SAC5B,yBAAKd,UAAW,WACd,kBAAC,EAAD,MAEA,8BACE,yBAAKA,UAAW,QACd,kBAAC,EAAD,CAASpB,SAAWuD,KAAK+B,cAActF,SAAWC,QAAUsD,KAAK+B,cAAcrF,QAAUC,MAAQqD,KAAKZ,MAAMK,SAASC,aAGvH,yBAAK7B,UAAW,SAIhB,yBAAKA,UAAW,YACd,yBAAKA,UAAW,WACd,2BAAOmE,QAAQ,cAAf,cACA,2BAAOC,KAAM,SAAUC,IAAK,EAAGC,IAAK,IAAKC,SAAUpC,KAAKqC,uBAAuBd,KAAKvB,MAAOsC,GAAI,aAAcvC,MAAOC,KAAKZ,MAAMK,SAASE,cAG1I,yBAAK9B,UAAW,WACd,2BAAOmE,QAAQ,cAAf,iBACA,2BAAOC,KAAM,SAAUC,IAAK,EAAGC,IAAK,KAAMC,SAAUpC,KAAKuC,kBAAkBhB,KAAKvB,MAAOsC,GAAI,QAASvC,MAAOC,KAAKZ,MAAMK,SAASC,aAGjI,yBAAK7B,UAAW,WACd,uBAAG2E,KAAM,IAAKC,QAASzC,KAAK0C,UAAUnB,KAAKvB,OAA3C,sB,GAlJE2C,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.752bcff1.chunk.js","sourcesContent":["import React from 'react'\r\nimport './index.css'\r\n\r\nconst radius = 300;\r\nconst ledCount = 13;\r\nconst startDeg = 40;\r\nconst endDeg = 360 - startDeg;\r\nconst interval = ((endDeg - startDeg) / (ledCount-1));\r\n\r\nconst rad = (deg) => deg * (Math.PI / 180);\r\n\r\nconst map = (num, in_min, in_max, out_min, out_max) => {\r\n  return (num - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\r\n};\r\n\r\nconst LEDRing = (props) => {\r\n  const { pressure, arousal, limit } = props;\r\n  const pressureIdx = Math.floor(map(pressure, 0, 4096, 0, ledCount - 1));\r\n  const limitIdx = Math.floor(map(limit, 0, 4096, 0, ledCount - 1));\r\n  const arousalIdx = Math.floor(map(arousal, 0, limit, 0, ledCount - 1));\r\n\r\n  let leds = [];\r\n  const showLimit = false;\r\n\r\n  for (let i = 0; i < ledCount; i++) {\r\n    const j = ledCount - i -1;\r\n    const rot = startDeg + (interval * i);\r\n    const x = (Math.sin(rad(rot)) * radius / 2) + radius / 2;\r\n    const y = (Math.cos(rad(rot)) * radius / 2) + radius / 2;\r\n    let l = 50;\r\n    let h = 0;\r\n\r\n    if (j === pressureIdx) {\r\n      h = 290;\r\n      l = 75;\r\n    } else if (j === limitIdx && showLimit) {\r\n      h = 210;\r\n      l = 75;\r\n    } else if (j < arousalIdx) {\r\n      h = map(i, 0, ledCount - 1, 0, 120);\r\n    } else {\r\n      l = 100;\r\n    }\r\n\r\n    leds[i] = { color: `hsl(${h}, 100%, ${l}%)`, x, y, rot, glow: l < 100 }\r\n  }\r\n\r\n  return (\r\n    <div className={'led-ring'} style={{ width: radius, height: radius }}>\r\n      { leds.map((led, i) =>\r\n        <div className={'led led-' + i} key={i} style={{\r\n          backgroundColor: led.color,\r\n          left: led.x,\r\n          top: led.y,\r\n          transform: `translate(-50%, -50%) rotate(-${led.rot}deg)`,\r\n          boxShadow: (led.glow ? `0 0 10px 3px ${led.color}` : \"\"),\r\n          opacity: (led.glow ? 1.0 : 0.8)\r\n        }} />)}\r\n\r\n      <div className={'led-value'}>{ Math.floor(arousal / limit * 100) }%</div>\r\n      <div className={'led-stat'}>Arousal</div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default LEDRing;\r\n","import React from 'react'\r\n\r\nconst wifiStrength = (rssi) => {\r\n  if (rssi < -90) {\r\n    return \"Very Low\"\r\n  } else if (rssi < -80) {\r\n    return \"Low\"\r\n  } else if (rssi < -70) {\r\n    return \"Good\"\r\n  } else if (rssi < -60) {\r\n    return \"Very Good\"\r\n  } else if (rssi < -50) {\r\n    return \"Excellent\"\r\n  } else if (rssi < 0) {\r\n    return \"Suspiciously Excellent\"\r\n  } else {\r\n    return \"Unknown\"\r\n  }\r\n};\r\n\r\nconst Header = (props) => {\r\n  const { status } = props;\r\n\r\n  return (\r\n    <header className=\"App-header\">\r\n      <span className={\"ssid\"}>{ status.ssid }</span>{' '}\r\n      <span className={\"ip\"}>{ status.ip }</span>{' '}\r\n      <span className={\"strength\"}>({ wifiStrength(status.signalStrength) })</span>\r\n    </header>\r\n  )\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react'\r\n\r\nconst Sidebar = (props) => {\r\n  return (\r\n    <div className={'sidebar'}>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Sidebar;\r\n","import React, {Component} from 'react';\nimport Graph from './Graph'\n\nimport Websocket from 'react-websocket';\n\nimport './App.css';\nimport LEDRing from \"./LEDRing\";\nimport Header from \"./Header\";\nimport Sidebar from \"./Sidebar\";\n\nclass App extends Component {\n  HOST = \"192.168.1.172\";\n  ws = null;\n  lastDraw = 0;\n\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      connected: false,\n      log: [],\n      pressure: [],\n      sampleDepth: 300,\n      sampleRate: 1, // updates per second\n      settings: {\n        peakLimit: 600,\n        brightness: 128,\n      },\n      status: {\n        ssid: \"\",\n        ip: \"\",\n        signalStrength: 0\n      }\n    }\n  }\n\n  handleBrightnessChange(e) {\n    e.preventDefault();\n    const brightness = e.target.value;\n    this.setState({ settings: { ...this.state.settings, brightness }});\n    this.send({ cmd: \"SET_BRIGHTNESS\", brightness });\n  }\n\n  handleLimitChange(e) {\n    e.preventDefault();\n    const limit = e.target.value;\n    this.setState({ settings: { ...this.state.settings, peakLimit: limit }});\n    this.send({ cmd: \"SET_LIMIT\", limit });\n  }\n\n  send(data) {\n    if (this.ws) {\n      this.ws.sendMessage(JSON.stringify(data));\n    }\n  }\n\n  log(data) {\n    const log = [...this.state.log];\n    log.push(data);\n    this.setState({log});\n  }\n\n  reconnect(e) {\n    e.preventDefault();\n    this.send({cmd: \"hello\"});\n  }\n\n  handleWsOpen() {\n    this.setState({connected: true});\n    this.log(\"Connected\");\n    this.send({cmd: \"GET_SETTINGS\"});\n    this.send({cmd: \"GET_WIFI_STATUS\"});\n    this.send({cmd: \"GET_SD_STATUS\"});\n  }\n\n  handleWsClose() {\n    this.setState({connected: false});\n    this.log(\"Closed\");\n  }\n\n  handleWsMessage(data) {\n    let doc;\n\n    try {\n      doc = JSON.parse(data);\n    } catch(e) {\n      doc = { data };\n      console.warn(e);\n    }\n\n    if (typeof doc.pressure !== \"undefined\") {\n      let pressure = this.state.pressure.slice(0 - (this.state.sampleDepth - 1));\n      doc.millis = doc.millis / 1000;\n      this.setState({ pressure: [...pressure, doc]});\n    } else {\n      console.log(doc);\n    }\n\n    if (doc.cmd === \"SETTINGS\") {\n      let newSettings = {...this.state.settings};\n      (typeof doc.brightness !== \"undefined\") && (newSettings.brightness = doc.brightness);\n      (typeof doc.peak_limit !== \"undefined\") && (newSettings.peakLimit = doc.peak_limit);\n      this.setState({settings: newSettings});\n    }\n\n    if (doc.cmd === \"WIFI_STATUS\") {\n      let newStatus = {...this.state.status};\n      newStatus.signalStrength = doc.signal_strength;\n      newStatus.ip = doc.ip;\n      newStatus.ssid = doc.ssid;\n      this.setState({status: newStatus});\n    }\n  }\n\n  getLastData() {\n    return (this.state.pressure.length && this.state.pressure[this.state.pressure.length - 1]) || {}\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Websocket\n          url={'ws://' + this.HOST}\n          onOpen={this.handleWsOpen.bind(this)}\n          onClose={this.handleWsClose.bind(this)}\n          ref={websocket => this.ws = websocket}\n          debug\n          onMessage={this.handleWsMessage.bind(this)}>\n        </Websocket>\n\n        <Header status={ this.state.status } />\n        <div className={'content'}>\n          <Sidebar />\n\n          <main>\n            <div className={'card'}>\n              <LEDRing pressure={ this.getLastData().pressure } arousal={ this.getLastData().arousal } limit={ this.state.settings.peakLimit } />\n            </div>\n\n            <div className={'card'}>\n              {/*<Graph data={this.state.pressure} peakLimit={this.state.settings.peakLimit} />*/}\n            </div>\n\n            <div className={'controls'}>\n              <div className={'control'}>\n                <label htmlFor=\"brightness\">Brightness</label>\n                <input type={\"number\"} min={1} max={255} onChange={this.handleBrightnessChange.bind(this)} id={\"brightness\"} value={this.state.settings.brightness} />\n              </div>\n\n              <div className={'control'}>\n                <label htmlFor=\"brightness\">Arousal Limit</label>\n                <input type={\"number\"} min={1} max={4096} onChange={this.handleLimitChange.bind(this)} id={\"limit\"} value={this.state.settings.peakLimit} />\n              </div>\n\n              <div className={'control'}>\n                <a href={'#'} onClick={this.reconnect.bind(this)}>Reconnect</a>\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}